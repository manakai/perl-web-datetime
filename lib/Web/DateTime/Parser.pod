=head1 NAME

Web::DateTime::Parser - Date and time parser for Web

=head1 SYNOPSIS

  use Web::DateTime::Parser;
  $parser = Web::DateTime::Parser->new;
  $dt = $parser->parse_global_date_and_time_string ($value);

=head1 DESCRIPTION

The C<Web::DateTime::Parser> module is a collection of parsing methods
for various date and time formats used in Web.

=head1 METHODS

Following methods are available:

=over 4

=item $parser = Web::DateTime::Parser->new

Create a new instance of the parser.

=item $parser->onerror ($code)

=item $code = $parser->onerror

Get or set the error handler for parser methods.  Any parse error, as
well as warning and additional processing information, is reported to
the handler.  See
<https://github.com/manakai/data-errors/blob/master/doc/onerror.txt>
for details of error handling.

The value should not be set while the parser is running.  If the value
is changed, the result is undefined.

=item $dt = $parser->parse_html_datetime_value ($string)

Parse the argument as an HTML C<time> element datetime value [HTML]
and return a L<Web::DateTime>, L<Web::DateTime::TimeZone>, or
L<Web::DateTime::Duration> object (or C<undef> if failed).  Any error
is reported through the C<onerror> handler.

This method is suitable for values from HTML C<time> element's
C<datetime> attribute or element content.

=item $dt = $parser->parse_global_date_and_time_string ($string)

Parse the argument as an HTML global date and time string
[HTML] and return a L<Web::DateTime> (or C<undef> if failed).  Any
error is reported through the C<onerror> handler.

This method is suitable for values from HTML C<< <input type=datetime>
>>.

=item $dt = $parser->parse_xs_date_time_stamp_string ($string)

Parse the argument as an XML Schema C<xs:dateTimeStamp> string [XSDT]
and return a L<Web::DateTime> (or C<undef> if failed).  Any error is
reported through the C<onerror> handler.

=item $dt = $parser->parse_local_date_and_time_string ($string)

Parse the argument as an HTML local date and time string
[HTML] and return a L<Web::DateTime> (or C<undef> if failed).  Any
error is reported through the C<onerror> handler.

This method is suitable for values from HTML C<< <input
type=datetime-local> >>.

=item $dt = $parser->parse_xs_date_time_string ($string)

Parse the argument as an XML Schema C<xs:dateTime> string [XSDT] and
return a L<Web::DateTime> (or C<undef> if failed).  Any error is
reported through the C<onerror> handler.

=item $dt = $parser->parse_schema_org_date_time_string ($string)

Parse the argument as an C<http://schema.org/DateTime> string
[SCHEMAORG] and return a L<Web::DateTime> (or C<undef> if failed).
Any error is reported through the C<onerror> handler.

The format might support leap seconds, but the L<Web::DateTime> module
does not support leap seconds.  If a leap second is specified, a
L<Web::DateTime> object representing the second just before the leap
second is returned.

=item $dt = $parser->parse_ogp_date_time_string ($string)

Parse the argument as an OGP DateTime string [OGP] and return a
L<Web::DateTime> (or C<undef> if failed).  Any error is reported
through the C<onerror> handler.

=item $dt = $parser->parse_rfc3339_date_time_string ($string)

Parse the argument as an RFC 3339 C<date-time> string [RFC3339] and
return a L<Web::DateTime> (or C<undef> if failed).  Any error is
reported through the C<onerror> handler.

The RFC 3339 format does support leap seconds, but the
L<Web::DateTime> module does not support leap seconds.  If a leap
second is specified, a L<Web::DateTime> object representing the second
just before the leap second is returned.

=item $dt = $parser->parse_rfc3339_xs_date_time_string ($string)

Parse the argument as an RFC 3339 C<date-time> string [RFC3339],
applying constraints of XML Schema C<xs:dateTime> datatype [XSDT], and
return a L<Web::DateTime> (or C<undef> if failed).  Any error is
reported through the C<onerror> handler.

This method is suitable for values in Atom 1.0 Date construct.

=item $dt = $parser->parse_pkix_generalized_time_string ($string)

Parse the argument as a PKIX C<GeneralizedTime> string [PKIX].  Any
error is reported through the C<onerror> handler.

This method is suitable for various timestamp fields in Certificates,
CRLs, and OCSP objects, used with TLS.

=item $dt = $parser->parse_http_date_string ($string)

Parse the argument as an C<HTTP-date> string [HTTP], using the parsing
rules in RFC 6265 [COOKIES], and
return a L<Web::DateTime> (or C<undef> if failed).  Any error is
reported through the C<onerror> handler.

Leap seconds are treated as invalid second values, which is a willful
violation to RFC 7231.

This method is suitable for values in HTTP C<Expires>,
C<Last-Modified>, and C<Date> headers, as well as in C<Expires>
attribute in Cookies.

=item $dt = $parser->parse_rss2_date_time_string ($string)

Parse the argument as an RFC 822 C<date-time> string used in RSS 2.0
document [RFC822] [RSS2] [RSS2BP], and return a L<Web::DateTime> (or
C<undef> if failed).  Any error is reported through the C<onerror>
handler.

This method is suitable for values in RSS 2.0 elements.  This method
is B<NOT> suitable for dates in e-mail, netnews, or HTTP headers.

=item $dt = $parser->parse_date_string ($string)

Parse the argument as an HTML date string [HTML] and return
a L<Web::DateTime> (or C<undef> if failed).  Any error is reported
through the C<onerror> handler.

This method is suitable for values from HTML C<< <input type=date> >>.

=item $dt = $parser->parse_xs_date_string ($string)

Parse the argument as an XML Schema C<xs:date> string [XSDT] and
return a L<Web::DateTime> (or C<undef> if failed).  Any error is
reported through the C<onerror> handler.

=item $dt = $parser->parse_iso8601_date_string ($string)

Parse the argument as an ISO 8601:2004 date representation [ISO8601]
and return a L<Web::DateTime> (or C<undef> if failed).  Any error is
reported through the C<onerror> handler.

This method is suitable for microdata C<http://schema.org/Date> item
values and date item values in data-vocabulary.org microdata
vocabulary.

=item $dt = $parser->parse_ymd_string ($string)

Parse the argument as an YMD string in the Gregorian calendar
[DATETIME] and return a L<Web::DateTime> (or C<undef> if failed).  Any
error is reported through the C<onerror> handler.

=item $dt = $parser->parse_julian_ymd_string ($string)

Parse the argument as an YMD string in the Julian calendar [DATETIME]
and return a L<Web::DateTime> (or C<undef> if failed).  Any error is
reported through the C<onerror> handler.

=item $dt = $parser->parse_date_string_with_optional_time ($string)

Parse the argument as an HTML date string with optional time
[HTML] and return a L<Web::DateTime> (or C<undef> if failed).  Any
error is reported through the C<onerror> handler.

This method is suitable for values in HTML C<< <ins datetime=""> >>
and C<< <del datetime="" >> attributes.

=item $dt = $parser->parse_js_date_time_string ($string)

Parse the argument as a date and time string in the way similar to the
C<Date()> constructor and C<Date.parse()> method of JavaScript
(ECMAScript) [JS].  Please note that this method is not compatible
with JavaScript enough yet as those JavaScript methods are largely
undocumented.

=item $dt = $parser->parse_w3c_dtf_string ($string)

Parse the argument as a so-called W3C-DTF string [W3CDTF] and return a
L<Web::DateTime> (or C<undef> if failed).  Any error is reported
through the C<onerror> handler.

This method is suitable for values in Atom 0.3 Date construct and RSS
1.0 C<dc:date> elements.

=item $dt = $parser->parse_year_string ($string)

Parse the argument as a year string in HTML and return a
L<Web::DateTime> (or C<undef> if failed).  Any error is reported
through the C<onerror> handler.

=item $dt = $parser->parse_xs_g_year_string ($string)

Parse the argument as an XML Schema C<xs:gYear> string [XSDT] and
return a L<Web::DateTime> (or C<undef> if failed).  Any error is
reported through the C<onerror> handler.

=item $dt = $parser->parse_manakai_year_string ($string)

Parse the argument as a year string in manakai Date and Time
specification [DATETIME] and return a L<Web::DateTime> (or C<undef> if
failed).  Any error is reported through the C<onerror> handler.

=item $dt = $parser->parse_month_string ($string)

Parse the argument as an HTML month string [HTML] and return
a L<Web::DateTime> (or C<undef> if failed).  Any error is reported
through the C<onerror> handler.

This method is suitable for values from HTML C<< <input type=month>
>>.

=item $dt = $parser->parse_xs_g_year_month_string ($string)

Parse the argument as an XML Schema C<xs:gYearMonth> string [XSDT] and
return a L<Web::DateTime> (or C<undef> if failed).  Any error is
reported through the C<onerror> handler.

=item $dt = $parser->parse_yearless_date_string ($string)

Parse the argument as an HTML yearless date string [HTML]
and return a L<Web::DateTime> (or C<undef> if failed).  Year of the
returned object is set to 2000.  Any error is reported through the
C<onerror> handler.

=item $dt = $parser->parse_xs_g_month_day_string ($string)

Parse the argument as an XML Schema C<xs:gMonthDay> string [XSDT] and
return a L<Web::DateTime> (or C<undef> if failed).  Year of the
returned object is set to 2000.  Any error is reported through the
C<onerror> handler.

=item $dt = $parser->parse_xs_g_month_string ($string)

Parse the argument as an XML Schema C<xs:gMonth> string [XSDT] and
return a L<Web::DateTime> (or C<undef> if failed).  Year of the
returned object is set to 2000.  Any error is reported through the
C<onerror> handler.

=item $dt = $parser->parse_xs_g_day_string ($string)

Parse the argument as an XML Schema C<xs:gDay> string [XSDT] and
return a L<Web::DateTime> (or C<undef> if failed).  Year and month of
the returned object is set to 2000 and 1, respectively.  Any error is
reported through the C<onerror> handler.

=item $dt = $parser->parse_week_string ($string)

Parse the argument as an HTML week string [HTML] and return
a L<Web::DateTime> (or C<undef> if failed).  Any error is reported
through the C<onerror> handler.

This method is suitable for values from HTML C<< <input type=week> >>.

=item $dt = $parser->parse_time_string ($string)

Parse the argument as an HTML time string [HTML] and return
a L<Web::DateTime> (or C<undef> if failed).  Any error is reported
through the C<onerror> handler.

This method is suitable for values from HTML C<< <input type=time> >>.

=item $dt = $parser->parse_xs_time_string ($string)

Parse the argument as an XML Schema C<xs:time> string [XSDT] and
return a L<Web::DateTime> (or C<undef> if failed).  Any error is
reported through the C<onerror> handler.

This method is suitable for microdata C<http://schema.org/Time> item
value.

=item $tz = $parser->parse_time_zone_offset_string ($string)

Parse the argument as an HTML time-zone offset string [HTML]
and return a L<Web::DateTime::TimeZone> (or C<undef> if failed).  Any
error is reported through the C<onerror> handler.

=item $tz = $parser->parse_vcard_time_zone_offset_string ($string)

Parse the argument as a time-zone offset string used in vCard C<tz>
item value [HTML] and return a L<Web::DateTime::TimeZone> (or C<undef>
if failed).  Any error is reported through the C<onerror> handler.

=item $duration = $parser->parse_duration_string ($string)

Parse the argument as an HTML duration string [HTML] and return a
L<Web::DateTime::Duration> (or C<undef> if failed).  Any error is
reported through the C<onerror> handler.

=item $duration = $parser->parse_vevent_duration_string ($string)

Parse the argument as an HTML vevent duration string [HTML] and return
a L<Web::DateTime::Duration> (or C<undef> if failed).  Any error is
reported through the C<onerror> handler.

=item $duration = $parser->parse_xs_duration_string ($string)

Parse the argument as an XML Schema C<xs:duration> string [XSDT] and
return a L<Web::DateTime::Duration> (or C<undef> if failed).  Any
error is reported through the C<onerror> handler.

=item $duration = $parser->parse_xs_day_time_duration_string ($string)

Parse the argument as an XML Schema C<xs:dayTimeDuration> string
[XSDT] and return a L<Web::DateTime::Duration> (or C<undef> if
failed).  Any error is reported through the C<onerror> handler.

=item $duration = $parser->parse_xs_year_month_duration_string ($string)

Parse the argument as an XML Schema C<xs:yearMonthDuration> string
[XSDT] and return a L<Web::DateTime::Duration> (or C<undef> if
failed).  Any error is reported through the C<onerror> handler.

=item $duration = $parser->parse_iso8601_duration_string ($string)

Parse the argument as an ISO 8601:2004 duration string [ISO8601] and
return a L<Web::DateTime::Duration> (or C<undef> if failed).  Any
error is reported through the C<onerror> handler.

Strictly speaking, ISO 8601 has different semantics for durations from
those of L<Web::DateTime::Duration>.  The method returns a duration
object which consist of numbers of months and seconds by assuming that
C<P1Y> is equal to C<P12M>; C<P1W> is equal to C<P7D>, C<P1D> is equal
to C<PT24H>, C<PT1H> is equal to C<PT60M>, and C<PT1M> is equal to
C<PT60S>; and a duration in alternative format equals to number of
seconds represented by it.

This method is suitable for microdata C<http://schema.org/Duration>
item values and date item values in data-vocabulary.org microdata
vocabulary.

=item $obj = $parser->parse_date_string_with_optional_time_and_duration ($string)

Parse the argument as either a valid date string, a valid global date
and time string, a pair of two valid global date and time strings, or
a pair of a valid global date and time string and a valid vevent
duration string, and return a L<Web::DateTime> or
L<Web::DateTime::Interval> (or C<undef> if failed).  Any error is
reported through the C<onerror> handler.  This method can be used to
parse the value of the vEvent microdata's C<rdate> item value [HTML].

=item $wr = $parser->parse_weekly_time_range_string ($string)

Parse the argument as a weekly time range string [SCHEMAORG] and
return a L<Web::DateTime::WeeklyTimeRange> (or C<undef> if failed).
Any error is reported through the C<onerror> handler.

=back

=head1 DEPENDENCY

The module requires Perl 5.8 or later.

=head1 SPECIFICATIONS

=over 4

=item HTML

HTML Standard <https://www.whatwg.org/specs/web-apps/current-work/>.

=item XSDT

W3C XML Schema Definition Language (XSD) 1.1 Part 2: Datatypes
<https://www.w3.org/TR/xmlschema11-2/>.

=item RFC3339

Date and Time on the Internet: Timestamps
<https://tools.ietf.org/html/rfc3339>.

=item SCHEMAORG

Schema.org <http://schema.org/>.

=item OGP

The Open Graph protocol <http://ogp.me/>.

=item ISO8601

ISO 8601:2004, Data elements and interchange formats -- Information
interchange -- Representation of dates and times.

=item HTTP

RFC 1945, Hypertext Transfer Protocol -- HTTP/1.0
<https://tools.ietf.org/html/rfc1945>.

RFC 7231, Hypertext Transfer Protocol (HTTP/1.1): Semantics and
Content <https://tools.ietf.org/html/rfc7231>.

=item COOKIES

RFC 6265, HTTP State Management Mechanism
<https://tools.ietf.org/html/rfc6265>.

=item W3CDTF

Date and Time Formats
<https://www.w3.org/TR/1998/NOTE-datetime-19980827>.

=item RFC822

RFC 822, STANDARD FOR THE FORMAT OF ARPA INTERNET TEXT MESSAGES
<https://tools.ietf.org/html/rfc822>.

=item RSS2

RSS 2.0 Specification <http://www.rssboard.org/rss-specification>.

=item RSS2BP

Really Simple Syndication Best Practices Profile
<http://www.rssboard.org/rss-profile>.

=item JS

ECMA-262 6th Edition Draft ECMAScript Language Specification
<https://people.mozilla.org/~jorendorff/es6-draft.html>.

JavaScript and Dates, What a Mess!
<http://blog.dygraphs.com/2012/03/javascript-and-dates-what-mess.html>,
<http://dygraphs.com/date-formats.html>.

=item DATETIME

Dates and times <https://manakai.github.io/spec-datetime/>.

=back

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2008-2016 Wakaba <wakaba@suikawiki.org>.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
